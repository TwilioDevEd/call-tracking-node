.chapter(data-title='Call Tracking with Twilio, Node.js and Express ')
  .step(data-file='index.js')
    :markdown
      ## What does this thing do?

      This [Express.js](//expressjs.com/) web application shows
      how you can use Twilio to track the effectiveness of different
      marketing channels.

      ![//howtodocs.s3.amazonaws.com/call-tracking-home.png](//howtodocs.s3.amazonaws.com/call-tracking-home.png)

      This application has three main features:

      - It purchases phone numbers from Twilio to use in different marketing
      campaigns (like a billboard or a bus advertisement)
      - It forwards incoming calls for those phone numbers to a salesperson
      - It displays charts showing data about the phone numbers and the calls
      they receive

      In this tutorial, we'll point out the key bits of code that make
      this application work.  [Check out the project README on
      GitHub](//github.com/twiliodeved/call-tracking-node) to
      see how to run the code yourself.

      Let's get started! Click the right arrow above to advance to the next
      code snippet.

      ---

      **See also:**

      * [Twilio Node Helper Library](//twilio.github.io/twilio-node/)
      * [Twilio REST API docs](//www.twilio.com/docs/api)
      * [Getting started with Express.js](//expressjs.com/starter/installing.html)
      * [Getting started with MongoDB](//docs.mongodb.org/manual/)
      * [Mongoose quickstart](//mongoosejs.com/docs/index.html)
      * [What is Call Tracking?](//www.searchenginejournal.com/seo-beginner-guide-call-tracking-care/83173/)

  .step(data-file='controllers/availableNumbers.js')
    :markdown
      ## Search for available phone numbers

      Call tracking requires us to search for and buy phone numbers on
      demand, associating a specific phone number with a lead
      source. From the dashboard, the user can search for new numbers, optionally
      filtering by area code.

      ---

      **See also:**

      * [Twilio Node Helper Library](//twilio.github.io/twilio-node/)
      * [Callbacks versus Promises](//twilio.github.io/twilio-node/#callbacks)
      * [Twilio Node examples](//twilio.github.io/twilio-node/#moreexamples)
      * [REST API: Available Phone Numbers](//www.twilio.com/docs/api/rest/available-phone-numbers)

  .step(data-file='views/availableNumbers.jade')
    :markdown
      ## Display available phone numbers

      After a user searches for phone numbers from the dashboard, we display a
      list of numbers that are currently available for purchase. Submitting one
      of the forms generated for a number will buy that phone number.

      ---

      **See also:**

      * [Jade template engine](//jade-lang.com/)
      * [Jade language reference](//jade-lang.com/reference/)
      * [Using template engines with Express](//expressjs.com/guide/using-template-engines.html)


  .step(data-file='controllers/leadSources.js', data-highlight='5-25')
    :markdown
      ## Buy a phone number

      The `create` function for the LeadSource resource expects a phone
      number as a parameter, and purchases a number through Twilio's
      API on behalf of this application's user. It enables the caller
      ID feature and associates the number with the current TwiML app
      SID. It immediately redirects the user so she can add a
      forwarding number and a description for the lead source.

      ---

      **See also:**

      * [Twilio REST API: Available Phone Numbers](//www.twilio.com/docs/api/rest/available-phone-numbers)
      * [Twilio Node examples](//twilio.github.io/twilio-node/#moreexamples)
      * [Save models with Mongoose](//mongoosejs.com/docs/api.html#model_Model-save)

  .step(data-file='controllers/leadSources.js', data-highlight='27-40')
    :markdown
      ## Associate a phone number with a lead source

      Once we have bought a number we display a form so the user can
      add a forwarding number and a description for this number. From
      now on, any call to this number will be attributed to this
      source. All phone numbers should be in E.164 format.

      ---

      **See also:**

      * [Mongoose queries](//mongoosejs.com/docs/queries.html)
      * [Forms with Jade](//github.com/jadejs/jade/blob/master/examples/form.jade)
      * [Express.js API documentation](//expressjs.com/api.html)
      * [E.164 format](//en.wikipedia.org/wiki/E.164)

  .step(data-file='models/LeadSource.js')
    :markdown
      ## The LeadSource model

      This is the model that contains the information provided in the
      form from the previous step. The `LeadSource` model associates a
      Twilio number to a named lead source (like "Wall Street Journal
      Ad" or "Dancing guy with sign"). It also tracks a phone number
      to which we'd like all the calls redirected, like your sales or
      support help line.

      ---

      **See also:**

      * [Mongoose models](//mongoosejs.com/docs/models.html)
      * [Mongoose populate](//mongoosejs.com/docs/populate.html)
      * [Mongoose schema types](//mongoosejs.com/docs/schematypes.html)

  .step(data-file='models/Lead.js')
    :markdown
      ## The Lead model

      A `Lead` represents a phone call generated by a
      `LeadSource`. Each time somebody calls a phone number associated
      with a `LeadSource`, we'll use the `Lead` model to record some
      of the [data Twilio gives
      us](//www.twilio.com/docs/api/twiml/twilio_request) about
      their call.

      ---

      **See also:**

      * [Mongoose models](//mongoosejs.com/docs/models.html)
      * [Mongoose populate](//mongoosejs.com/docs/populate.html)
      * [Mongoose schema types](//mongoosejs.com/docs/schematypes.html)

  .step(data-file='controllers/leads.js', data-highlight='8-32')
    :markdown
      ## Forward calls and create leads

      Whenever a customer calls one of our Twilio numbers, Twilio will
      send a POST request to the URL associated with this view
      function (should be `/lead`).

      We use the incoming call data to create a new `Lead` for a
      `LeadSource`, then return
      [TwiML](//www.twilio.com/docs/api/twiml) that connects our
      caller with the `forwarding_number` of our `LeadSource`.

      ---

      **See also:**

      * [Twilio voice request parameters](//www.twilio.com/docs/api/twiml/twilio_request)
      * [TwiML basics with twilio-node](//twilio.github.io/twilio-node/#twimlBasic)
      * [TwiML <Dial> verb](//www.twilio.com/docs/api/twiml/dial)

  .step(data-file='controllers/leads.js', data-highlight='34-51')
    :markdown
      ## Get statistics about our lead sources

      One useful statistic we can get from our data is how many calls
      each `LeadSource` has received. We might also want to know the
      cities the leads are coming from. For this we define two
      functions which will be mapped to routes the front-end can call.

      ---

      **See also:**

      * [Mongoose population](//mongoosejs.com/docs/populate.html)
      * [Underscore.js](//underscorejs.org/)
      * [Underscore.js countBy](//underscorejs.org/#countBy)

  .step(data-file='public/js/pieCharts.js')
    :markdown
      ## Visualize our statistics with Chart.js

      Back on the home page, we fetch call tracking statistics in JSON
      from the server using
      [jQuery](//api.jquery.com/jquery.get/).  We display the
      stats in colorful pie charts we create with
      [Chart.js](//www.chartjs.org/). We also use some utility functions
      from [Underscore.js](//underscorejs.org/) to munge the data from
      our back-end.

  .step
    :markdown
      ## Where to next?

      That's it! Our Express.js application is now ready to purchase new phone
      numbers, forward incoming calls, and record some statistics for our
      business. 

      If you're a Node.js developer working with Twilio, you might also enjoy these
      tutorials:

      [**Click-To-Call (Node.js)**](//www.twilio.com/docs/howto/walkthrough/click-to-call/node/express)

      Put a button on your web page that connects visitors to live
      support or sales people via telephone.

      [**Two Factor Authentication with Authy (Node.js)**](//www.twilio.com/docs/howto/walkthrough/two-factor-authentication/node/express)

      Learn to implement account verification in your web app with
      Twilio-powered Authy.

      Thanks for checking out this tutorial! If you have any feedback to share
      with us, we'd love to hear it. Tweet [@twilio](//twitter.com/twilio)
      to let us know what you think.
